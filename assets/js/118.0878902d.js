(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{606:function(t,e,a){"use strict";a.r(e);var _=a(15),v=Object(_.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"维护索引和表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#维护索引和表"}},[t._v("#")]),t._v(" 维护索引和表")]),t._v(" "),a("p",[t._v("维护表有三个主要目的：")]),t._v(" "),a("ul",[a("li",[t._v("找到并修复坏的表")]),t._v(" "),a("li",[t._v("维护准确的索引统计信息")]),t._v(" "),a("li",[t._v("减少碎片")])]),t._v(" "),a("h2",{attrs:{id:"找到并修复损坏的表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#找到并修复损坏的表"}},[t._v("#")]),t._v(" 找到并修复损坏的表")]),t._v(" "),a("p",[t._v("对于 MyISAM 存储引擎来说，表损坏通常是系统崩溃导致的。其他的引擎也会由于硬件问题、MySQL 本身的缺陷或则操作系统的问题导致索引损坏。")]),t._v(" "),a("p",[a("strong",[t._v("损坏的索引")]),t._v(" 会导致查询 "),a("strong",[t._v("返回错误的结果")]),t._v(" 或则 "),a("strong",[t._v("莫须有的主键冲突等")]),t._v("问题，严重时甚至还会导致数据库的崩溃。")]),t._v(" "),a("h3",{attrs:{id:"check-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-table"}},[t._v("#")]),t._v(" check table")]),t._v(" "),a("p",[t._v("如果你遇到了古怪的问题：例如，一些不应该发生的错误，可以尝试运行 "),a("code",[t._v("check table")]),t._v(" 来检查是否发生了表损坏（某些存储引擎不支持该命令，有些则以不同的选项来控制完全检查表的方式）。"),a("strong",[a("code",[t._v("check table")]),t._v(" 通常能找出大多数的表和索引的错误。")])]),t._v(" "),a("h3",{attrs:{id:"pepair-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pepair-table"}},[t._v("#")]),t._v(" pepair table")]),t._v(" "),a("p",[a("strong",[t._v("可以使用 "),a("code",[t._v("pepair table")]),t._v(" 命令来修复损坏的表")]),t._v("，同样某些存储引擎不支持该命令。如果 "),a("strong",[t._v("存储引擎不支持")]),t._v("，可以通过一个不做任何操作（no-op）的 alter 操作来重建表，例如修改表的存储引擎为当前的引擎。下面是针对 InnoDB 的例子：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" innodb_tb1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"其他方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他方式"}},[t._v("#")]),t._v(" 其他方式")]),t._v(" "),a("p",[t._v("可以使用一些存储引擎相关的离线工具，例如 myisamchk、或则将数据导出一份，然后再重新导入。")]),t._v(" "),a("p",[t._v("如果损坏的是系统区域，，或则是表的「行数据」区域，而不是索引，那么上面的办法就没有用了。这种情况下，可以从备份表中恢复表，或则尝试从损坏的数据文件中尽可能的恢复数据。")]),t._v(" "),a("p",[t._v("如果 "),a("strong",[t._v("InnoDB  引擎的表出现了损坏")]),t._v("，那么 "),a("strong",[t._v("一定是发生了严重的错误")]),t._v("，需要like调查原因。InnoDB 一般不会出现损坏，它的设计保证了它并不容易被损坏。如果发生了损坏，一般要么是 "),a("strong",[t._v("数据的硬件问题")]),t._v("，如内存或磁盘，或则是 InnoDB 本身的缺陷（不太可能）。常见的类似错误通常是由于尝试使用 rsync 备份 InnoDB 导致的。不存在什么查询能够让 InnoDB 表损坏。如果是查询导致表损坏，那一定是遇到了 BUG。")]),t._v(" "),a("p",[t._v("如果遇到数据损坏，最重要的是找出是什么导致了损坏，而不是简单的修复，否则很有可能还会不断的损坏。可以通过设置 "),a("code",[t._v("innodb_force_recovery")]),t._v(" 参数进入 InnoDB 的强制恢复模式来修复数据，更多细节请参考 MySQL 手册。另外还可以使用开源的 InnoDB 数据恢复工具箱（InnoDB Data Recover Toolkit） 直接从 InnoDB 数据文件恢复出数据。")]),t._v(" "),a("h2",{attrs:{id:"更新索引统计信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新索引统计信息"}},[t._v("#")]),t._v(" 更新索引统计信息")]),t._v(" "),a("p",[t._v("MySQl 的查询优化器会通过两个 API 来了解存储引擎的索引值的分布信息，以决定如何使用索引。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("records_in_range()")])]),t._v(" "),a("p",[t._v("通过向存储引擎传入两个边界值获取在这个范围大概有多少条记录。对于某些存储引擎来说，该接口返回精准值，例如 MyISAM，对于另一些存储引擎来说则是一个估值，例如 InnoDB。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("info()")])]),t._v(" "),a("p",[t._v("该接口返回各种类型的数据，包括索引的基数（每个键值有多少条记录）")])])]),t._v(" "),a("h3",{attrs:{id:"analyze-table-重建索引统计信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#analyze-table-重建索引统计信息"}},[t._v("#")]),t._v(" analyze table 重建索引统计信息")]),t._v(" "),a("p",[t._v("如果存储引擎向优化器提供的扫描行数信息是不准确的数据，或则执行计划本身太复杂以致于无法准确的获取各个阶段匹配的行数，那么 "),a("strong",[t._v("优化器会使用索引统计信息来估算扫描行数")]),t._v("。MySQL 优化器使用的是 "),a("strong",[t._v("基于成本的模型")]),t._v("，而衡量成本的主要指标就是 "),a("strong",[t._v("一个查询需要扫描多少行")]),t._v("。如果没有统计信息，或则统计信息不准确，优化器就很有可能做出错误的决定。可以通过运行 "),a("code",[t._v("analyze table")]),t._v(" 来重新生成统计信息解决这个问题")]),t._v(" "),a("p",[t._v("每种存储引擎实现索引统计信息的方式不同，所以需要进行 "),a("code",[t._v("analyze table")]),t._v(" 的频率也不同，每次运行的成本也不同：")]),t._v(" "),a("ul",[a("li",[t._v("Memory 引擎根本不存储索引统计信息")]),t._v(" "),a("li",[t._v("MyISAM 将索引统计信息存储在磁盘中，analyze table 需要进行一次全索引扫描来计算索引基数。"),a("strong",[t._v("在整个过程中需要锁表")]),t._v("。")]),t._v(" "),a("li",[t._v("直到 MySQL 5.5 版本，InnoDB 也不在磁盘存储索引统计信息，而是通过随机的索引访问进行评估并将其存储在内存中。")])]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("show index from")]),t._v(" 命令来查看索引的基数（Cardinality），例如：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actor\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Table")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Non_unique")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Key_name")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Seq_in_index")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Column_name")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Collation")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Cardinality")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Sub_part")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Packed")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Null")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Index_type")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Index_comment")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Visible")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Expression")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("actor")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("PRIMARY")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("actor_id")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("200")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("BTREE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("actor")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("idx_actor_last_name")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("last_name")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("121")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("BTREE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")])])])]),t._v(" "),a("p",[t._v("该命令输出了很多关于索引的信息，在 MySQL 手册中有各个字段的含义。这里需要特别知道的是 "),a("strong",[t._v("索引列的基数（Cardinality）")]),t._v("，显示了存储引擎估算 "),a("strong",[t._v("索引列有多少个不同的取值")]),t._v("。")]),t._v(" "),a("p",[t._v("在 MySQL 5+ 版本中，还可以通过 "),a("code",[t._v("information_schema.statistics")]),t._v(" 表方便的查询到这些信息。例如，可以编写一个查询给出当前选择性比较低的索引。需要注意的是：如果服务器上的库表非常多，则从这里获取元数据的速度可能会非常慢，而且会给 MySQL 带来额外的压力。")]),t._v(" "),a("p",[t._v("InnoDB 的统计信息值的深入研究。"),a("strong",[t._v("InnoDB 引擎通过抽样的方式来计算统计信息")]),t._v("，首先随机读取少量的索引页面，然后依次为样本计算索引的统计信息。在老版本中，样本页面的数量是 8，新版本中可以通过参数 "),a("code",[t._v("innodb_stats_sample_pages")]),t._v(" 来设置样本页的数量。设置更大的值，理论上来说可以帮助生成更准确的索引信息，特别是对于某些超大的数据表来说，但具体设置多大合适依赖于具体的环境。")]),t._v(" "),a("p",[t._v("InnoDB 在以下时机计算索引的统计信息：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在表首次打开")])]),t._v(" "),a("li",[a("p",[t._v("执行 analyze table")])]),t._v(" "),a("li",[a("p",[t._v("表的大小发生非常大的变化")]),t._v(" "),a("p",[t._v("大小变化超过十六分之一，或则插入了 20 亿行都会触发")])])]),t._v(" "),a("p",[t._v("InnoDB 在以下时机会触发索引统计信息的更新：")]),t._v(" "),a("ul",[a("li",[t._v("打开某些 "),a("code",[t._v("information_schema")]),t._v(" 表")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("show table status")]),t._v(" 和 "),a("code",[t._v("show index")])]),t._v(" "),a("li",[t._v("在 MySQL 客户端开启自动补全功能的时候")])]),t._v(" "),a("p",[t._v("如果服务器上有大量的数据，这可能就是个很严重的问题，尤其是当 I/O 比较慢的时候。客户端或则监控程序触发索引信息采样更新时可能会导致大量的锁，并给服务器带来很多额外的压力，这会让用户因为启动时间漫长而沮丧。"),a("strong",[t._v("只要 "),a("code",[t._v("show index")]),t._v(" 查看索引统计信息，就一定会触发统计信息的更新")]),t._v("。可以关闭 "),a("code",[t._v("innodb_stats_on_metadata")]),t._v(" 参数来避免上面提到的问题。")]),t._v(" "),a("p",[t._v("一旦关闭索引统计信息的自动更新，那么久需要周期性的使用 analyze table 来手动更新。")]),t._v(" "),a("h2",{attrs:{id:"减少索引和数据的碎片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少索引和数据的碎片"}},[t._v("#")]),t._v(" 减少索引和数据的碎片")]),t._v(" "),a("p",[t._v("B-Tree 索引可能会碎片化，这会降低查询的效率。"),a("strong",[t._v("碎片化的索引可能会以很差或则无序的方式存储在磁盘上")]),t._v("。")]),t._v(" "),a("p",[t._v("根据设计，B-Tree 需要随机磁盘访问才能定位到叶子页，所以随机访问是不可避免的。然而，如果 "),a("strong",[t._v("叶子页在物理分布上是顺序且紧密的")]),t._v("，那么查询的性能就会更好。否则，对于范围查询、索引覆盖扫描等操作来说，"),a("strong",[t._v("速度可能会降低很多倍")]),t._v("；对于索引覆盖扫描这一点来说更加明显。")]),t._v(" "),a("p",[t._v("表的数据存储也可能碎片化。然而，数据存储的碎片化比索引更加复杂。有三种类型的数据碎片：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("行碎片（row fragmentation）")]),t._v(" "),a("p",[t._v("这种碎片指的是 "),a("strong",[t._v("数据行被存储为多个地方的多个片段中")]),t._v("。即使查询只从索引中访问一行记录，行碎片也会导致性能下降。")])]),t._v(" "),a("li",[a("p",[t._v("行间碎片（Intra-row fragmentation）")]),t._v(" "),a("p",[t._v("指逻辑上顺序的页，或则行在磁盘上不是顺序存储的。行间碎片对诸如 "),a("strong",[t._v("全表扫描")]),t._v(" 和 "),a("strong",[t._v("聚簇索引")]),t._v(" 扫描之类的操作有很大的影响，因为这些操作原本能够从磁盘上顺序存储的数据中获益。")])]),t._v(" "),a("li",[a("p",[t._v("剩余空间碎片（free space fragmentation）")]),t._v(" "),a("p",[t._v("指数据页中有大量剩余空间。这会导致服务器读取大量不需要的数据，从而造成浪费。")])])]),t._v(" "),a("p",[t._v("对于 MyISAM 表，这三类都有可能发生。但 InnoDB 不会出现短小的行碎片；InnoDB 会移动短小的行并重写到一个片段中。")]),t._v(" "),a("p",[t._v("可以通过执行 "),a("code",[t._v("optimize table")]),t._v(" 或则导出再导入的方式来重新整理数据。这对于多数存储引擎都是有效的。对于一些存储引擎如 MyISAM，可以通过排序算法重建索引的方式来消除碎片。老版本的 InnoDB 没有能消除碎片的方法。在新版的 InnoDB 中新增了 "),a("strong",[t._v("在线")]),t._v(" 添加和删除索引的功能，可以通过 "),a("strong",[t._v("先删除，然后再重新创建索引")]),t._v(" 的方式来消除索引的碎片化。")]),t._v(" "),a("p",[t._v("对于不支持的存储引擎，可以通过不做任何操作的 alter table 操作来重建表。")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" innodb_tb1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("对于开启了 "),a("code",[t._v("expand_fast_index_creation")]),t._v(" 参数的 Percona Server，按这种方式重建表，则会同时消除表和索引的碎片化。但对于标准版本的 MySQL 则只会消除表（实际上是聚簇索引）的碎片化。可以先删除所有索引，然后重建表，最后重新创建索引的方式模拟这个功能。")])])}),[],!1,null,null,null);e.default=v.exports}}]);