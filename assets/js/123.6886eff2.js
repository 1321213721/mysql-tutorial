(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{593:function(s,t,a){"use strict";a.r(t);var e=a(15),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"重构查询的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重构查询的方式"}},[s._v("#")]),s._v(" 重构查询的方式")]),s._v(" "),a("p",[s._v("在优化有问题的查询时，目标应该找到一个更优的方法获得实际需要的结果，而不是一定总是需要从 MySQL 获取一模一样的结果集。")]),s._v(" "),a("p",[s._v("有时候，可以将查询转换一种写法让其返回一样的结果，但是性能更好。")]),s._v(" "),a("p",[s._v("也可以通过修改应用代码，用另一种方式完成查询，最终达到一样的目的。")]),s._v(" "),a("p",[s._v("本节将介绍如何通过这种方式来重构查询，并展示何时需要使用这样的技巧。")]),s._v(" "),a("h2",{attrs:{id:"一个复杂查询还是多个简单查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个复杂查询还是多个简单查询"}},[s._v("#")]),s._v(" 一个复杂查询还是多个简单查询")]),s._v(" "),a("p",[s._v("设计查询的时候一个需要考虑的重要问题是："),a("strong",[s._v("是否需要将一个复杂的查询分成多个简单的查询")]),s._v("。")]),s._v(" "),a("p",[s._v("在传统的实现中，总是强调需要数据库层完成尽可能多的工作，这样做的逻辑在于以前总认为网络通信、查询解析和优化是一件代价很高的事情。")]),s._v(" "),a("p",[s._v("这种想法对于 MySQL 并不适用，从设计上让链接和断开连接都很轻量级，在返回一个小的查询结果方面很高效。现代的网络速度比以前快很多，无论是带宽还是延迟。在某些版本的 MySQL 上，即使一个通用服务器上，也 "),a("strong",[s._v("能够运行每秒超过 10 万的查询")]),s._v("，即使是一个千兆网卡也能轻松满足每秒超过 2000 次的查询。所以 "),a("strong",[s._v("运行多个小查询已经不是大问题了")])]),s._v(" "),a("p",[s._v("MySQL 内部每秒能够扫描内存中上百万行数据，相比之下，MySQL 响应数据给客户端就慢得多了。在 "),a("strong",[s._v("其他条件都相同的时候，使用尽可能少的查询当然是更好")]),s._v(" 的。但是有时候将一个大查询分解为多个小查询是很有必要的。")]),s._v(" "),a("p",[s._v("不过，在应用设计的时候，如果一个查询能够胜任时还写多个独立查询是不明智的。例如：对一个数据表做 10 次独立的查询来返回 10 行数据，每个查询返回一条结果，查询 10 次。")]),s._v(" "),a("h2",{attrs:{id:"切分查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切分查询"}},[s._v("#")]),s._v(" 切分查询")]),s._v(" "),a("p",[s._v("有时候对于 "),a("strong",[s._v("一个大查询我们需要「分而治之」")]),s._v("，将大查询切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果。这不就是分页查询的思想吗？")]),s._v(" "),a("p",[s._v("删除旧的数据就是一个好的例子。定期删除大量数据时，如果用一个大的语句一次性完成的话，则")]),s._v(" "),a("ul",[a("li",[s._v("可能需要一次锁住很多数据")]),s._v(" "),a("li",[s._v("占满整个事务日志")]),s._v(" "),a("li",[s._v("耗尽资源")]),s._v(" "),a("li",[s._v("阻塞很多小的但重要的查询。")])]),s._v(" "),a("p",[s._v("将一个大的 delete 语句切分成多个较小的查询可以：")]),s._v(" "),a("ul",[a("li",[s._v("尽可能小的影响 MySQL 性能")]),s._v(" "),a("li",[s._v("还可以减少 MySQL 复制的延迟")])]),s._v(" "),a("p",[s._v("例如，需要每个月运行一次下面的查询：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" messages "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" created "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" date_sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interval")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("可以用类似下面的办法来完成同样的工作")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" {\n\trows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" do_query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  \t"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"delete from messages where created < date_sub(now(), interval 3 month)"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n} "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("一次性删除一万行数据一般来说是一个比较高效而且对服务器影响也最小的做法（如果是事务性引擎，很多时候小事务能更高效）。同时，需要注意的是，"),a("strong",[s._v("如果每次删除数据后，都暂停一会再做下一次删除")]),s._v("，这样也可以将服务器上原本一次性的压力分散到一个很长的时间段中，就可以大大降低对服务器的影响，还可以大大减少删除时所的持有时间。")]),s._v(" "),a("h2",{attrs:{id:"分解关联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分解关联查询"}},[s._v("#")]),s._v(" 分解关联查询")]),s._v(" "),a("p",[a("strong",[s._v("很多高性能的应用都会对关联查询进行分解")]),s._v("。简单说：对单表查询，在应用程序中进行关联。")]),s._v(" "),a("p",[s._v("例如下面这个查询：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tag\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" tag_post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" tag_post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" tag_post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("可以分解成下面的这些查询来代替")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tag_where tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tag_post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" tag_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9098")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("乍一看，这样做并没有什么好处，原本一条查询，这里却变成多条查询，返回的结果又是一样的。事实上，用分解关联查询的方式重构查询有如下的优势：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("让缓存的效率更高")]),s._v(" "),a("p",[s._v("许多应用程序可以方便的缓存单标查询对应的结果对象。")]),s._v(" "),a("p",[s._v("例如：上面查询中 tag 已经被缓存了，那么应用就可以跳过第一个查询。")]),s._v(" "),a("p",[s._v("再如：应用中已经缓存了 ID 为 123，456 的内容，那么低三个查询的 "),a("code",[s._v("in()")]),s._v(" 中就可以少几个 ID.")]),s._v(" "),a("p",[s._v("另外对 MySQL 的查询缓存来说，如果关联中的某个表发生了变化，那么久无法使用查询缓存了，而拆分之后，如果某个表现很少改变，那么急于该表的查询就可以重复利用资源缓存结果了。")])]),s._v(" "),a("li",[a("p",[s._v("将查询分解后，执行单个查询可以减少锁的竞争")])]),s._v(" "),a("li",[a("p",[s._v("在应用层做关联，可以容易对数据库进行拆分，更容易做到高性能和扩展。")])]),s._v(" "),a("li",[a("p",[s._v("查询本身效率也会有所提升，这个可比随机的关联要更好高效")])]),s._v(" "),a("li",[a("p",[s._v("可以减少冗余记录的查询")]),s._v(" "),a("p",[s._v("在应用层做关联查询，意味着对于某条记录应用，从这里看，这样的重构还可能会减少网络和内存的消耗。")])]),s._v(" "),a("li",[a("p",[s._v("更近一步，这样做相当于在应用中实现了 "),a("strong",[s._v("哈希关联")]),s._v("，而不是使用 MySQl 的嵌套循环关联。某些场景的哈希关联效率要高很多。")])])]),s._v(" "),a("p",[s._v("在很多场景下，"),a("strong",[s._v("通过重构查询将关联放到应用程序中将会更加高效")]),s._v("，这样的场景有很多。比如：")]),s._v(" "),a("ul",[a("li",[s._v("当应用能够方便的缓存单个查询的结果的时候")]),s._v(" "),a("li",[s._v("当可以将数据分布到不同的 MySQL 服务器上的时候")]),s._v(" "),a("li",[s._v("当能使用 "),a("code",[s._v("in()")]),s._v(" 方式替代关联查询的时候")]),s._v(" "),a("li",[s._v("当查询中使用同一个数据表的时候")])])])}),[],!1,null,null,null);t.default=r.exports}}]);