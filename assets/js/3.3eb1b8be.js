(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{532:function(t,s,a){t.exports=a.p+"assets/img/image-20200524153542584.705aa4a7.png"},533:function(t,s,a){t.exports=a.p+"assets/img/image-20200524153642254.97979a25.png"},534:function(t,s,a){t.exports=a.p+"assets/img/image-20200524153901884.e5af3006.png"},535:function(t,s,a){t.exports=a.p+"assets/img/image-20200524155447997.d0d04f96.png"},536:function(t,s,a){t.exports=a.p+"assets/img/image-20200524162356587.e92dcff3.png"},537:function(t,s,a){t.exports=a.p+"assets/img/image-20200524162651959.b24ff736.png"},538:function(t,s,a){t.exports=a.p+"assets/img/image-20200524162916306.41c0a179.png"},539:function(t,s,a){t.exports=a.p+"assets/img/image-20200524163055674.b5a13f9a.png"},540:function(t,s,a){t.exports=a.p+"assets/img/image-20200524164205504.372ccc5c.png"},541:function(t,s,a){t.exports=a.p+"assets/img/image-20200524164328663.e516e611.png"},542:function(t,s,a){t.exports=a.p+"assets/img/image-20200524185023871.dab0b7ae.png"},543:function(t,s,a){t.exports=a.p+"assets/img/image-20200524185214938.dd68550e.png"},544:function(t,s,a){t.exports=a.p+"assets/img/image-20200524185421351.891d257d.png"},545:function(t,s,a){t.exports=a.p+"assets/img/image-20200524185822696.b7f5b5d8.png"},546:function(t,s,a){t.exports=a.p+"assets/img/image-20200524193126939.c75feb9c.png"},547:function(t,s,a){t.exports=a.p+"assets/img/image-20200524193651841.d1713924.png"},604:function(t,s,a){"use strict";a.r(s);var e=a(15),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"高性能索引策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高性能索引策略"}},[t._v("#")]),t._v(" 高性能索引策略")]),t._v(" "),e("p",[t._v("正确创建和使用索引是实现高性能查询的基础。前面讲解了各种各类型的索引及其优缺点，现在来看看如何真正发挥这些索引的优势。")]),t._v(" "),e("p",[t._v("高效选择和使用索引的方式有很多种，其中有些是针对特殊案例的优化，有些是针对特定行为的优化。使用哪个索引，以及如何评估选择不同索引的性能影响的技巧，则需要持续不断的学习。本章将帮助读者理解如何高效使用索引。")]),t._v(" "),e("h2",{attrs:{id:"独立的列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#独立的列"}},[t._v("#")]),t._v(" 独立的列")]),t._v(" "),e("p",[t._v("独立的列是指 "),e("strong",[t._v("索引列不能是表达式的一部分，也不能是函数的参数")])]),t._v(" "),e("p",[t._v("例如，下面这个查询无法使用 actor_id 列的索引")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actor "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("code",[t._v("actor_id + 1 = 5")]),t._v(" 那么 actor_id 等于 4，但是 MySQL 无法自动解析这个方程式。这完全是用户行为，我们应该养成 "),e("strong",[t._v("简化 where 条件")]),t._v(" 的习惯，"),e("strong",[t._v("始终将索引列单独放在比较符号的一侧")])]),t._v(" "),e("p",[t._v("下面是另一个常见的错误：")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" to_days"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("current_date")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" to_days"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_col"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"前缀索引和索引选择性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前缀索引和索引选择性"}},[t._v("#")]),t._v(" 前缀索引和索引选择性")]),t._v(" "),e("p",[t._v("有时候需要索引很长的字符列，这会让索引变得大且慢。一个策略是前面提到过的模拟哈希索引。但是有时候这样做还不够。")]),t._v(" "),e("p",[t._v("通常可以 "),e("strong",[t._v("索引开始的部分字符")]),t._v("，这样可以大大 "),e("strong",[t._v("节约索引空间，从而提高索引效率")]),t._v("。但这也会"),e("strong",[t._v("降低索引的选择性")]),t._v("。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("索引的选择性")]),t._v(" "),e("p",[t._v("不重复的索引值（也称为基数（cardinality）） 和数据表记录总数（"),e("code",[t._v("#T")]),t._v(" ）的比值，范围从 "),e("code",[t._v("1/#T")]),t._v(" 到 1 之间。")])]),t._v(" "),e("p",[e("strong",[t._v("索引的选择性越高则查询效率越高")]),t._v("，因为选择性高的索引可以让 MySQL 在查找时过滤掉更多的行，唯一索引的选择性是 1，这是最好的索引选择性，性能也是最好的。")]),t._v(" "),e("p",[t._v("一般情况下某个列前缀的选择性也是足够高的，足以满足查询性能。对于 BLOB、TEXT 或则很长的 varchar 类型的列，必须使用前缀索引，因为 MySQL 不允许索引这些列的完整长度。")]),t._v(" "),e("p",[t._v("诀窍在于要 "),e("strong",[t._v("选择足够长的前缀以保证较高的选择性，同时又不能太长（节约空间）")]),t._v("。")]),t._v(" "),e("p",[t._v("为了决定前缀的合适长度，需要找到最常见的值的列表，然后和最常见的前缀列表进行比较。")]),t._v(" "),e("p",[t._v("下面是一个例子，在这之前我们"),e("a",{attrs:{href:"http://downloads.mysql.com/docs/sakila-db.zip",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载 MySQL 官网的 sakila 数据库表结构和数据导入到我们的数据库中进行练习"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("由于 city 表中没有合适的数据，下面生成一张表用于演示")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    city "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 下面的语句最终结果是：从 city 表中随机获取数据插入到 city_demo 表中")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 前面两条 sql 是插入了 1200 行的数据")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 后面一条是随机获取数据更新这 1200 行")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" city\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" city\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" city "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" city "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" RAND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" cnt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" city\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" city\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" cnt "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("cnt")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("city")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Mwene-Ditu")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Jamalpur")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Shimonoseki")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Greensboro")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Firozabad")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Dadu")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Teboksary")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Citt del Vaticano")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Kakamigahara")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Cuernavaca")])])])]),t._v(" "),e("p",[t._v("上面的词每个词都出现了 6~8 次。现在查找到最频繁出现的城市前缀，先从 3 个前缀字母开始：")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" cnt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" city\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" cnt "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("cnt")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("left(city,3)")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Mwe")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Jam")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Shi")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Cue")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Gre")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Fir")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Dad")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Teb")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Cit")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Kak")])])])]),t._v(" "),e("p",[t._v("其实这里看到，3 个字母前缀的时候，就已经接近了完整列的选择性。如果数量不和原始列接近的话，就尝试继续增加字母前缀数量，找到一个接近的长度。")]),t._v(" "),e("h3",{attrs:{id:"如何计算完整列的选择性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何计算完整列的选择性"}},[t._v("#")]),t._v(" 如何计算完整列的选择性")]),t._v(" "),e("p",[t._v("计算合适的前缀长度的另外一个办法就是计算完整列的选择性，并使用前缀的选择性接近于完整列的选择性。显示显示如何计算完整列的选择性：")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 结果为 0.4375")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("在这个例子中，如果前缀的选择性能够接近 0.437 基本上就可用了。下面演示了如何一次性得到合适的前缀长度")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel6"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel7"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel8"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel9"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel10"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel12"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" sel15\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("sel1")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel2")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel3")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel4")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel5")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel6")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel7")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel8")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel9")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel10")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel12")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sel15")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("0.0217")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.1475")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.3433")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4125")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4267")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4333")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4350")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4350")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4350")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4358")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4358")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.4375")])])])]),t._v(" "),e("p",[t._v("可以看到当前缀长度达到 7 的时候，再增加前缀长度，选择性提升的幅度已经很小了。")]),t._v(" "),e("p",[t._v("只看平均选择性是不够的，也有例外的情况，需要考虑最坏情况下的选择性。平均选择性会让你认为前缀长度为 4 的索引就已经足够了，但是如果数据分布很不均匀，可能就会有陷阱。如果观察前缀为 4 的最常出现城市的次数")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" cnt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pref\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" pref\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" cnt "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("cnt")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("pref")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Sant")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Shim")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Sout")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("San")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Cuau")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Mwen")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Jama")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Sala")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Gree")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Dadu")])])])]),t._v(" "),e("p",[t._v("可以看到，最高的出现了 11 次，最低的出现了 6 次，差不多相差一倍；以 S 开头的城市数量较多，选择性较低。")]),t._v(" "),e("p",[t._v("所以可以看看索引前缀为 7 的，经过查看之后，相差不怎么大。这就找到了合适的索引前缀数量。")]),t._v(" "),e("h3",{attrs:{id:"创建前缀索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建前缀索引"}},[t._v("#")]),t._v(" 创建前缀索引")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("前缀索引式一种能使索引更小、更快的有效办法。缺点就是：")]),t._v(" "),e("ul",[e("li",[t._v("无法用来做 order by 和 group by")]),t._v(" "),e("li",[t._v("无法做覆盖扫描")])]),t._v(" "),e("h2",{attrs:{id:"多列索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多列索引"}},[t._v("#")]),t._v(" 多列索引")]),t._v(" "),e("p",[t._v("很多人对多列索引的理解都不够。一个常见的错误是，为每个列创建独立的索引，或则按照错误的 "),e("strong",[t._v("顺序")]),t._v(" 创建多列索引")]),t._v(" "),e("p",[t._v("为每个列创建单独的索引，如下")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  c1 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  c2 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  c3 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("这种索引策略一般是看到这个模糊的建议导致的：把 where 条件里面的列都建上索引。")]),t._v(" "),e("p",[t._v("实际上这个建议是非常错误的，这样一来最好的情况下也只能是「一星」索引，其性能比起真正最优的索引可能差几个数量级。"),e("strong",[t._v("有时候如果无法设计一个 "),e("RouterLink",{attrs:{to:"/high-performance/05/02.html#三星系统"}},[t._v("三星索引")])],1),t._v("，那么不如忽略掉 where 子句，集中精力优化索引的顺序，或则创建一个全覆盖索引。")]),t._v(" "),e("h3",{attrs:{id:"索引合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引合并"}},[t._v("#")]),t._v(" 索引合并")]),t._v(" "),e("p",[e("strong",[t._v("在多个列上建立独立的单列索引大部分情况下并不能提高 MySQL 的查询性能")]),t._v("。 MySQL 5+ 出现了一种叫 「索引合并（index merge）」 的策略，一定程度上可以使用表上多个单列索引来定位指定的行。")]),t._v(" "),e("p",[t._v("更早的版本智只能使用其中某一个单列索引，如下查询")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" film_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actor_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("film_actor\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" film_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("在老版本中，MySQL 会对这个查询使用全表扫描。除非改写成两个查询 union 方式")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" film_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actor_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("film_actor\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" film_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actor_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("film_actor\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" film_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("在 MySQL 5+ 版本中，查询能同时使用者两个单列索引进行扫描，并将结果进行合并")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" film_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actor_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("film_actor\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" film_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("select_type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("table")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("partitions")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("possible_keys")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key_len")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("ref")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("rows")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("filtered")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Extra")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("film_actor")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("index_merge")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("PRIMARY,idx_fk_film_id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("PRIMARY,idx_fk_film_id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("2,2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("29")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("100")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Using union(PRIMARY,idx_fk_film_id); Using where")])])])]),t._v(" "),e("p",[t._v("该表的 "),e("code",[t._v("actor_id")]),t._v(" 是主键，"),e("code",[t._v("film_id")]),t._v(" 是一个单列索引。可以看到是 type 是  index_merge 类型的；")]),t._v(" "),e("p",[t._v("MySQL 会使用这类技术优化复杂查询，所以还会在某些语句的 Extra 列表中看到嵌套操作。")]),t._v(" "),e("p",[t._v("索引合并策略有时候是一种优化的结果，但实际上更多时候说明了表上的索引建的很糟糕")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当出现服务器对 "),e("strong",[t._v("多个索引做相交操作时（通常有多个 AND 条件）")])]),t._v(" "),e("p",[t._v("通常意味着需要一个包含所有相关列的 "),e("strong",[t._v("多列索引")]),t._v("，而不是多个独立的单列索引")])]),t._v(" "),e("li",[e("p",[t._v("当服务器需要对 "),e("strong",[t._v("多个索引做联合操作时（通常有多个 OR 条件）")])]),t._v(" "),e("p",[t._v("通常需要耗费大量 CPU 和内存资源在算法的缓排序、和合并操作上。特别是当其中有些 "),e("strong",[t._v("索引的选择性不高")]),t._v("，需要合并扫描返回的大量数据的时候。")])]),t._v(" "),e("li",[e("p",[t._v("更重要的是："),e("strong",[t._v("优化器不会把这些计算到「查询成本（cost）」中")])]),t._v(" "),e("p",[t._v("优化器值关心随机页面读取，这会使得查询的成本被「低估」，导致该执行计划还不如直接走全表扫描。这样做不但会消耗更多的 CPU 和内存资源，还可能会影响查询的并发性。通常来说，还不如将查询改写成 union 的方式往往更好。")])])]),t._v(" "),e("p",[t._v("如果看到有索引合并，应该好好检查下查询和表的结构，看是不是最优的。也可以通过参数 "),e("code",[t._v("optimizer_switch")]),t._v(" 来关闭索引合并功能。也可以使用 ignore index 提示让优化器忽略掉某些索引")]),t._v(" "),e("h2",{attrs:{id:"选择合适的索引列顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择合适的索引列顺序"}},[t._v("#")]),t._v(" 选择合适的索引列顺序")]),t._v(" "),e("p",[t._v("最容易引起困惑的问题就是索引列的顺序。"),e("strong",[t._v("正确的顺序依赖于使用该索引的查询")]),t._v("，并且同时时需 "),e("strong",[t._v("考虑如何更好的满足排序和分组的需要")]),t._v("（本节内容适用于 B-Tree 索引，其他类型的索引并不会像 B-Tree 索引一样按顺序存储数据）")]),t._v(" "),e("p",[e("strong",[t._v("在一个多列 B-Tree 索引中，索引列的顺序意味着索引首先按照最左列进行排序")]),t._v("，其次是第二列，等等。所以，索引可以按照升序或降序进行扫描，以满足精确符合列顺序的 order by、group by 和 distinct 等子句的查询需求。")]),t._v(" "),e("p",[e("strong",[t._v("所以多列索引的顺序至关重要")]),t._v("。在 "),e("RouterLink",{attrs:{to:"/high-performance/05/02.html#三星系统"}},[t._v("三星索引")]),t._v(" 中，列的属性也决定了一个索引是否能够成为一个真正的三星索引。")],1),t._v(" "),e("p",[t._v("如何选择索引的列顺序有一个经验法则："),e("strong",[t._v("将选择性最高的列放到索引最前列")]),t._v("。在某些场景可能有帮助，但通常不如避免随机 I/O 和排序那么重要，考虑问题需要更全面（"),e("strong",[t._v("场景不同则选择不同")]),t._v("）")]),t._v(" "),e("p",[e("strong",[t._v("当不需要考虑排序和分组时，将选择性最高的列放在前面通常是很好的")]),t._v("。这时候索引的作用只是用于优化 where 条件的查找。然而，"),e("strong",[t._v("性能不只是依赖于所有索引列的选择性（整体基数）")]),t._v("，也和查询条件的具体值有关，也就是 "),e("strong",[t._v("和值的的分布有关")]),t._v("，和前面介绍选择前缀的长度思路一样，可能需要根据那些运行频率最高的查询来调整索引列的顺序，让这种情况下索引的选择性最高。")]),t._v(" "),e("p",[t._v("以下面的查询为例；")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" payment\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" staff_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" customer_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("584")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("这个语句是应该将哪个字段放在索引的最左边？我们可以使用下面的语句来预测下")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staff_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("customer_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("584")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" payment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("sum(staff_id = 2)")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("sum(customer_id = 584)")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("7992")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("30")])])])]),t._v(" "),e("p",[t._v("根据前面的 "),e("strong",[t._v("经验法则")]),t._v("，将 customer_id 列放在最前面（数量更少，选择性高）。来看看这个列对应的 staff_id 的选择性如何")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staff_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" payment\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" customer_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("584")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询结果为 17 ")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("选择性更高，过滤掉更多的数据，提高了性能，但是这样做有一个需要注意的地方：查询结果非常依赖于选定的具体值。如果按照上述办法优化，可能对其他一些条件值的查询不公平，服务器的整体性能可能变得更糟糕，或则其他某些查询的运行变得不如预期。")]),t._v(" "),e("p",[t._v("如果是从 pt-query-digest 这样的工具报告中提取「最差」查询，再使用上面的办法来选择索引顺序往往是非常高效的。如果没有类似的具体查询来运行，那么最好还是按照前面讲解的基于选择性平均值估算来确定索引列的顺序。")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" staff_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" staff_id_selectivity"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" customer_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" customer_id_selectivity\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" payment\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("staff_id_selectivity")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("customer_id_selectivity")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("0.0001")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.0373")])])])]),t._v(" "),e("p",[t._v("customer_id 列的选择性更高，所以将其作为索引列的第一列：")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" payment\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("customer_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staff_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[e("strong",[t._v("使用前缀索引的时候，在某些条件值的基数比正常值高的时候，问题就来了")]),t._v("。")]),t._v(" "),e("p",[t._v("比如：一个应用中，对于没登录的用户，都将其用户名记录为「guset」，在记录用户活动的其他表中 guset 就成为了一个特殊的用户 ID。一旦查询涉及整个用户，那么对于正常用户的查询就大不相同了。系统账户也会导致类似的问题，一个系统通常有一个特殊的账户，和普通账户不同，系统中所有账户都是这个账户的好友，发送通知信息都通过该账户的好友列表发送通知信息。这个账户的巨大好友列表很容易导致网站出现服务器性能问题。")]),t._v(" "),e("p",[t._v("这实际上是一个非常典型的问题，任何的异常用户，不仅仅是那些勇于管理应用的设计糟糕的账户会有同样的问题。那些拥有大量好友、图片、状态、搜藏的用户，也会有前面提到的系统账户的问题。")]),t._v(" "),e("p",[t._v("下面是一个我们遇到过的真实案例：在一个用户分享购买商品和购买经验的轮替上，这个特殊表上的查询运行得非常慢：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(532),alt:"image-20200524153542584"}})]),t._v(" "),e("p",[t._v("这个查询看似没有建立合适的索引，explain 的结果如下")]),t._v(" "),e("p",[e("img",{attrs:{src:a(533),alt:"image-20200524153642254"}})]),t._v(" "),e("p",[t._v("MySQL 为这个查询选择了索引 "),e("code",[t._v("groupId,userId")]),t._v("，如果 "),e("strong",[t._v("不考虑列的基数")]),t._v("，这看起来是一个非常合理的选择。如果考虑下 userId 和 groupId 条件匹配的行数，可能就会有不同的想法了：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(534),alt:"image-20200524153901884"}})]),t._v(" "),e("p",[t._v("可以看到符合 groupId 条件几乎满足表中的所有行，符合 userId 条件的有 130 万条记录，也就是说索引基本上没有什么用。")]),t._v(" "),e("p",[t._v("这些数据是从其他应用中迁移过来的，迁移的时候把所有的消息都赋予了管理员组的用户。这个案例的解决办法是修改应用代码，区分这类特殊用户和组，禁止针对这类用户和组执行这个查询。")]),t._v(" "),e("p",[t._v("从这个小案例可以看到 **经验法则和推论在多数情况下是有用的 **，但要注意 "),e("strong",[t._v("不要假设平均情况下的性能也能代表特殊情况下的性能")]),t._v("，特殊情况可能会摧毁整个应用的性能。")]),t._v(" "),e("p",[t._v("还要记住：where 子句中的排序、分组和范围条件等其他因素，可能也对查询的性能造成非常大的影响。")]),t._v(" "),e("h2",{attrs:{id:"聚簇索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引"}},[t._v("#")]),t._v(" 聚簇索引")]),t._v(" "),e("p",[t._v("聚簇索引并 "),e("strong",[t._v("不是一种单独的索引类型")]),t._v("，而是 "),e("strong",[t._v("一种数据存储方式")]),t._v("。具体细节依赖于实现方式，但 InnoDB 的聚簇索引实际上在 "),e("strong",[t._v("同一个结构中保存了 B-Tree 索引和数据行")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("聚簇索引并 "),e("strong",[t._v("不是一种单独的索引类型")]),t._v("，而是 "),e("strong",[t._v("一种数据存储方式")]),t._v("。")]),t._v(" "),e("p",[t._v("这句话很重要，聚簇索引式数据存储方式。")])]),t._v(" "),e("p",[t._v("当表有聚簇索引时，它的 "),e("strong",[t._v("数据行实际存放在索引的叶子页（leaf page）中")]),t._v("。")]),t._v(" "),e("p",[t._v("聚簇："),e("strong",[t._v("表示数据行和相邻的键值紧凑的存储在一起")]),t._v("。因为无法同时把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引（不过，覆盖索引可以模拟多个聚簇索引的情况，后面详细讲解）")]),t._v(" "),e("p",[t._v("因为是存储引擎负责实现索引，索引不是所有存储引擎都支持，本节只关注 InnoDB，但是这里的讨论的原理对于任何支持聚簇索引的存储引擎都是使用的。")]),t._v(" "),e("p",[t._v("下图展示了聚簇索引中的记录是如何存放的。注意到："),e("strong",[t._v("叶子页包含了行的全部数据，但是节点页只包含了索引列")]),t._v("。在该案例中，索引列包含的是整数值。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(535),alt:"image-20200524155447997"}})]),t._v(" "),e("p",[t._v("笔者并没有看出来上图的索引列和数据怎么存储的。")]),t._v(" "),e("p",[t._v("一些数据库服务器允许选择哪个索引作为聚簇索引，但是本书写作时，没有任何一个 MySQL 内置的存储引擎支持这一点。"),e("strong",[t._v("InnoDB 将通过主键聚集数据")]),t._v("，也就是说上图「被索引的列」就是主键列。")]),t._v(" "),e("p",[e("strong",[t._v("如果没有定义主键，InnoDB 会选择一个唯一的非空索引代替")]),t._v("，如果没有这样的索引，InnoDB 会隐式定义一个主键来作为聚簇索引。InnoDB 只聚集在同一个页面中的记录。包含相邻键值的页面可能会相聚甚远。")]),t._v(" "),e("p",[t._v("聚簇索引可能对性能有帮助，但也可能导致严重的性能问题。所以需要仔细考虑聚簇索引。")]),t._v(" "),e("h3",{attrs:{id:"聚集数据重要优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚集数据重要优点"}},[t._v("#")]),t._v(" 聚集数据重要优点")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("可以把相关数据保存在一起")]),t._v(" "),e("p",[t._v("例如：实现电子邮箱时，可以根据用户 ID 来聚集数据，这样值需要从磁盘读取少数的数据页就能获取某个用户的全部邮件。"),e("strong",[t._v("如果没有使用聚簇索引，则每封邮件都可能导致一次磁盘 I/O")])])]),t._v(" "),e("li",[e("p",[t._v("数据访问更快")]),t._v(" "),e("p",[t._v("聚簇索引将索引和数据保存在同一个 B-Tree 中，因此从聚簇索引中获取数据通常比在非聚簇索引中查找要快。")])]),t._v(" "),e("li",[e("p",[t._v("使用覆盖索引扫描的查询可以直接使用页节点中的主键值")])])]),t._v(" "),e("p",[t._v("如果在设计表和查询时能充分利用上面的优点，那就能极大地提升性能。同时，聚簇索引也有一些缺点：")]),t._v(" "),e("h3",{attrs:{id:"聚簇索引的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引的缺点"}},[t._v("#")]),t._v(" 聚簇索引的缺点")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("聚簇数据最大限度 "),e("strong",[t._v("提高了 I/O 密集型应用的性能")]),t._v("，但如何数据全部都放在内存中，则访问的顺序就没那么重要了，聚簇索引也就没有什么优势了")])]),t._v(" "),e("li",[e("p",[t._v("插入速度严重依赖于插入顺序")]),t._v(" "),e("p",[t._v("按照主键的顺序插入是加载数据到 InnoDB 表中速度最快的方式。但如果不是按照主键顺序加载数据，那么在加载完成后最好使用 optimize table 命令重新组织一下表。")])]),t._v(" "),e("li",[e("p",[t._v("更新聚簇索引列的代价很高")]),t._v(" "),e("p",[t._v("因为会强制 InnoDB 将每个被更新的行移动到新的位置")])]),t._v(" "),e("li",[e("p",[t._v("给予聚簇索引的表在插入新行，或则主键被更新导致需要移动行的时候，可能面临「页分裂（page split）」的问题。")]),t._v(" "),e("p",[t._v("当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次页分裂操作，会导致表占用更多的磁盘空间")])]),t._v(" "),e("li",[e("p",[t._v("聚簇索引可能导致全表扫描变慢")]),t._v(" "),e("p",[t._v("尤其是行比较稀疏，或则由于页分裂导致数据存储不连续的时候")])]),t._v(" "),e("li",[e("p",[t._v("二级索引（非聚簇索引）可能比想象的要更大")]),t._v(" "),e("p",[t._v("因为在二级索引的叶子节点包含了引用行的主键列")])]),t._v(" "),e("li",[e("p",[t._v("二级索引访问需要两次索引查找，而不是一次")])])]),t._v(" "),e("p",[t._v("为什么二级索引需要两次索引操作？"),e("strong",[t._v("二级索引中保存的「行指针」")]),t._v("，要记住：二级索引叶子节点保存的 "),e("strong",[t._v("不是指向行的物理位置的指针，而是行的主键值")])]),t._v(" "),e("p",[t._v("这意味着通过二级索引查找行，存储引擎需要找到二级索引的叶子节点获得对应的主键值，然后根据这个值去聚簇索引中查找对应的行。这里做了重复的工作：两次 B-tree 查找而不是一次（并不是所有的非聚簇索引都能做到一次索引查询就找到行。当行更新的时候可能无法存储在原来的位置，这会导致表中出现行的碎片化或则移动行并在原位置保存「向前指针」，这两种情况都会导致在查找行时需要更多的工作） 。")]),t._v(" "),e("p",[t._v("对于 InnoDB，自适应哈希索引能够减少这样的重复工作。")]),t._v(" "),e("h3",{attrs:{id:"innodb-和-myisam-的数据分布对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb-和-myisam-的数据分布对比"}},[t._v("#")]),t._v(" InnoDB  和 MyISAM 的数据分布对比")]),t._v(" "),e("p",[t._v("聚簇索引和非聚簇索引的数据分布有区别，以及对应的主键索引和二级索引的数据分布也有区别，通常会让人感到困扰和意外。来看看 InnoDB 和 MyISAM 是如何存储下面这个表的")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("create table layout_test(\n\tcol1 int not null,\n\tcol2 int not null,\n\tprimary key(col1),\n\tkey(col2)\n)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("假设该表的主键取值为 1~10000，按照随机顺序插入并使用 optmize table 命令做了优化。换句话说，数据在磁盘上的存储方式移交最优，但行的顺序是随机的。列 col2 的值是从 1~100 之间随机赋值，所以有很多重复的值的。")]),t._v(" "),e("h4",{attrs:{id:"myisam-的数据分布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#myisam-的数据分布"}},[t._v("#")]),t._v(" MyISAM 的数据分布")]),t._v(" "),e("p",[t._v("MyISAM 的数据分布：非常简单。按照数据插入的顺序存储在磁盘上")]),t._v(" "),e("p",[e("img",{attrs:{src:a(536),alt:"image-20200524162356587"}})]),t._v(" "),e("p",[t._v("行号从 0 递增，因为行是定长的，所以 MyISAM 可以直接从表的开头跳过所需的字节找到需要的行（MyISAM 并不总是使用上图中的行号，而是根据定长还是变长的行使用不同策略）")]),t._v(" "),e("p",[t._v("这种分布方式很容易创建索引。下图隐藏了页的物理细节，只显示索引中的「节点」，索引中的每个叶子节点包含行号")]),t._v(" "),e("p",[e("img",{attrs:{src:a(537),alt:"image-20200524162651959"}})]),t._v(" "),e("p",[t._v("这里忽略了一些细节，比如前一个 B-Tree 节点有多少内部节点，不过这并不影响对非聚簇索引存储引擎的基本数据分布的理解。")]),t._v(" "),e("p",[t._v("cole2 列上的索引和其他索引没有什么区别，如下图")]),t._v(" "),e("p",[e("img",{attrs:{src:a(538),alt:"image-20200524162916306"}})]),t._v(" "),e("p",[t._v("事实上，MyISAM 中主键索引和其他索引在结构上没有什么不同。主键索引就是一个名为 primary 的唯一非空索引。")]),t._v(" "),e("h4",{attrs:{id:"innodb-的数据分布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb-的数据分布"}},[t._v("#")]),t._v(" InnoDB 的数据分布")]),t._v(" "),e("p",[t._v("因为InnoDB 支持聚簇索引，所以使用非常不同的方式存储同样的数据。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(539),alt:"image-20200524163055674"}})]),t._v(" "),e("p",[t._v("第一眼看上去和图 5-5 没有什么不同，仔细看，会注意到该图显示了 "),e("strong",[t._v("整个表")]),t._v("，而 "),e("strong",[t._v("不是只有索引")]),t._v("。因为在 InnoDB 中，聚簇索引「就是」表，所以不像 MyISAM 那样需要独立的行存储。")]),t._v(" "),e("p",[e("strong",[t._v("聚簇索引的每一个叶子节点都包含了主键值、事务 ID、用于事务和 MVCC 的回滚指针以及所有剩余的列（在该例中是 col2）")]),t._v("。"),e("strong",[t._v("如果主键是一个列前缀索引，InnoDB 也会包含完整的主键列和剩下其他列")]),t._v("。")]),t._v(" "),e("p",[t._v("还有一点和 MyISAM 不同的是，InnoDB 的二级索引和聚簇索引很不相同。InnoDB 二级索引的叶子节点中存储的不是「行指针」，而是主键值，并以此作为指向行的「指针」。这样的策略减少了当出现行移动或则数据页分裂时二级索引的维护工作。使用主键值当做指针会让二级索引占用更多的空间，换来的好处是，"),e("strong",[t._v("InnoDB 在移动行时无须更新二级索引中的这个「指针」")]),t._v("。")]),t._v(" "),e("p",[t._v("下图展示了 B-Tree 的叶子节点结构，但我们故意省略了非叶子节点这样的细节。InnoDB 的非叶子节点包含了索引列和一个向下级节点的指针（下一级可以是非叶子节点，也可以是叶子节点），这对聚簇索引和二级索引都适用")]),t._v(" "),e("p",[e("img",{attrs:{src:a(540),alt:"image-20200524164205504"}})]),t._v(" "),e("p",[t._v("下图是描述 InnoDB 和 MyISAM 如何存放表的抽象图。可以很容易看出来 InnoDB 和 MyISAM 保存数据和索引的区别")]),t._v(" "),e("p",[e("img",{attrs:{src:a(541),alt:"image-20200524164328663"}})]),t._v(" "),e("p",[t._v("如果还没有理解聚簇索引和非聚簇索引的有什么区别、为何有这些区别以及这些区别的重要性，不用担心，随着学习的深入会慢慢理解，当学完本书或则下一章，这些问题就会变得越来越清楚。这些概念有些复杂，需要一些时间才能完全理解。")]),t._v(" "),e("h3",{attrs:{id:"在-innodb-表中按主键顺序插入行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-innodb-表中按主键顺序插入行"}},[t._v("#")]),t._v(" 在 InnoDB 表中按主键顺序插入行")]),t._v(" "),e("p",[t._v("如果正在使用 InnoDB 表并且没有什么数据需要聚集，可以定义一个代理键（surrogate key）作为主键，这种主键的数据应该和应用无关，最简单的方法是使用 auto_increment 的自增列。这样可以 "),e("strong",[t._v("保证数据行是按顺序写入，对于根据主键做关联操作的性能也会更好")])]),t._v(" "),e("p",[t._v("最好避免随机的（不连续且值的分布范围非常大）的聚簇索引，特别是对于 I/O 密集型的应用。")]),t._v(" "),e("p",[t._v("例如从性能的角度考虑，使用 "),e("strong",[t._v("UUID 来作为聚簇索引则会很糟糕")]),t._v("：它使得聚簇索引的插入变得完全随机，这是最坏的情况，"),e("strong",[t._v("使得数据没有任何聚集特性")]),t._v("。")]),t._v(" "),e("p",[t._v("为了演示这一点，做如下两个基准测试。第一个使用整数 ID 插入 userinfo 表：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(542),alt:"image-20200524185023871"}})]),t._v(" "),e("p",[t._v("第二个例子是使用 userinfo_uuid 表，除了主键改为 UUID 外，其他的都一样。")]),t._v(" "),e("p",[t._v("首先，在一个有足够内存容纳索引的服务器上向这两个表个插入 100 万条记录。然后继续插入 300 万条记录，使索引的大小超过服务器的内存容量。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(543),alt:"image-20200524185214938"}})]),t._v(" "),e("p",[t._v("注意到 UUID 主键插入行不仅花费的时间更长，占用空间也更大。一方面是由于主键字段更长，另一方面毫无疑问是由于页分裂和碎片导致的。")]),t._v(" "),e("p",[t._v("为了明白为什么这样，来看看网第一个表中插入数据时，索引发生了什么变化。下图显示了插满一个页面后继续插入相邻的下一个页面的场景")]),t._v(" "),e("p",[e("img",{attrs:{src:a(544),alt:"image-20200524185421351"}})]),t._v(" "),e("p",[t._v("因为主键值是顺序的，所以 InnoDB 把每一条记录都存储在上一条记录的后面。当达到页 "),e("strong",[t._v("最大填充因子时")]),t._v("时（InnoDB 默认的最大填充因子是页大小的 15/16 ，留出部分空间用于以后修改），下一条记录就会写入新的页中。一旦数据按照这种顺序的方式加载，主键页就会近似于被顺序的记录填满，这也正是所期望的结果（然而二级索引页可能不一样）。")]),t._v(" "),e("p",[t._v("下图是使用 UUID 聚簇索引的表插入数据")]),t._v(" "),e("p",[e("img",{attrs:{src:a(545),alt:"image-20200524185822696"}})]),t._v(" "),e("p",[t._v("因为新行的主键值不一定比之前插入的大，所以 InnoDB 无法简单的总是把新行插入到索引的最后，而是需要为新的行寻找合适的位置：通常是已有数据的中间位置，并且分配空间。这会增加很多额外的工作，并导致数据分布不够优化。下面是一些缺点：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("导致大量的随机 I/O")]),t._v(" "),e("p",[t._v("写入的目标页可能已经刷到磁盘上并从缓存中移除，或则是还没有被加载到缓存中，InnoDB 在插入之前不得不先找到并从磁盘读取目标页到内存中。这将导致大量的随机 I/O")])]),t._v(" "),e("li",[e("p",[t._v("移动大量数据，频繁做页分裂操作")]),t._v(" "),e("p",[t._v("因为写入是乱序的，InnoDB 不得不频繁的做页分裂操作，以便为新的行分配空间。这会导致移动大量数据，一次插入最少需要修改三个而不是一个页")])]),t._v(" "),e("li",[e("p",[t._v("数据碎片")]),t._v(" "),e("p",[t._v("由于频繁的页分裂，页会变得稀疏并被不规则填充，所以最终数据会有碎片。")])])]),t._v(" "),e("p",[t._v("在把这些随机值载入到聚簇索引以后，也许需要做一次 optimize table 来重建表并优化页的填充。")]),t._v(" "),e("h3",{attrs:{id:"顺序的主键什么时候回造成更坏的结果？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#顺序的主键什么时候回造成更坏的结果？"}},[t._v("#")]),t._v(" 顺序的主键什么时候回造成更坏的结果？")]),t._v(" "),e("p",[t._v("对于高并发工作负载，在 InnoDB 中按主键顺序插入可能会造成明显的争用。")]),t._v(" "),e("p",[t._v("主键的上界会成为「热点」。并发插入可能导致间隙锁竞争。")]),t._v(" "),e("p",[t._v("另一个热点可能是 auto_increment 锁机制，如果遇到这个问题，则可能需要考虑重新设计表或则应用，或则更改 Innodb_autoinc_lock_mode 配置")]),t._v(" "),e("h2",{attrs:{id:"覆盖索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[t._v("#")]),t._v(" 覆盖索引")]),t._v(" "),e("p",[t._v("设计优秀的索引应该考虑到整个查询，而不单单是 where 条件部分。索引确实是一种查找数据的高效方式，但是 MySQL 也 "),e("strong",[t._v("可以使用索引来直接获取列的数据，这样就不再需要读取数据行")]),t._v("。如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为**「覆盖索引」**")]),t._v(" "),e("p",[t._v("覆盖索引能够极大的提高性能。考虑下如果查找值需要扫描索引而无需回表，会带来多少好处：")]),t._v(" "),e("h3",{attrs:{id:"覆盖索引好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引好处"}},[t._v("#")]),t._v(" 覆盖索引好处")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("减少数据读取")]),t._v(" "),e("p",[t._v("索引条目通常远小于数据行大小，所以如果只需要读取索引，会极大减少数据访问量。这对缓存的负载非常重要，因为这种情况下响应时间大部分会花费在数据拷贝上。覆盖索引对于 I/O 密集型的应用也有帮助，因为索引比数据更小，更容易全部放入内存中（MyISAM 能压缩索引以变得更小）")])]),t._v(" "),e("li",[e("p",[t._v("范围查询排序也能用上")]),t._v(" "),e("p",[t._v("因为索引式按照列值顺序存储的（至少在单个页内是如此），所以对于 I/O 密集型的范围查询会比随机从磁盘读取每一行数据的 I/O 要少得多。对于某些存储引擎，例如 MyISAM 和 Percona XtraDB，甚至可以通过 optimize 命令使得索引完全顺序排列，这让简单的范围查询能使用完全顺序的索引访问")])]),t._v(" "),e("li",[e("p",[t._v("访问数据更快")]),t._v(" "),e("p",[t._v("一些存储引擎如 MyISAM 在内存中只缓存索引，数据则依赖于操作系统来缓存，因为要访问数据库需要一次系统调用。这可能会导致严重的性能问题，尤其是那些系统调用占了数据访问中的最大开销场景")])]),t._v(" "),e("li",[e("p",[t._v("避免对主键索引的二次查询")]),t._v(" "),e("p",[t._v("由于 InnoDB 的聚簇索引，覆盖索引对 InnoDB 表特别有用。InnoDB 的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询。")])])]),t._v(" "),e("p",[t._v("在所有这些场景中，在索引中满足查询的成本一般比查询行要小得多。")]),t._v(" "),e("p",[t._v("不是所有类型的索引都可以成为覆盖索引。"),e("strong",[t._v("覆盖索引必须要存储索引列的值")]),t._v("，而哈希索引、空间索引和全文索引等都不存储索引列的值，所以 MySQL 只能使用 B-Tree 索引做覆盖索引。而且不是所有的存储引擎都支持覆盖索引，在本书写作时， Memory 存储引擎就不支持覆盖索引。")]),t._v(" "),e("p",[e("strong",[t._v("当发起一个被索引覆盖的查询")]),t._v("（也叫做索引覆盖查询）时，在 explain 的 "),e("strong",[t._v("Extra 列可以看到")]),t._v(" "),e("strong",[t._v("「using index」")]),t._v(" 的信息（type 列的 index 和 Extra 的 Using index 是完全不同的两个东西。type 列和覆盖索引毫无关系，它只是表示这个查询访问数据的方式，或则说是 MySQL 查找行的方式，MySQL 手册中称之为连接方式 join type）。")]),t._v(" "),e("p",[t._v("例如 sakila.inventory 表有一个多列索引 "),e("code",[t._v("(store_id,film_id)")]),t._v("，如果只需要访问这两列，就可以使用这个索引做覆盖索引")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" store_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" film_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inventory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("select_type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("table")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("partitions")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("possible_keys")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key_len")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("ref")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("rows")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("filtered")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Extra")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("inventory")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("index")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("idx_store_id_film_id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("4581")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("100")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Using index")])])])]),t._v(" "),e("p",[t._v("索引覆盖查询还有很多陷阱可能会导致无法实现优化。查询优化器会在执行查询前判断是否有一个索引能进行覆盖。假设 "),e("strong",[t._v("索引覆盖了 where 条件中的字段，但是不是整个查询涉及的字段")]),t._v("，如果条件为假（false）， MySQL 5.5- 也总是会回表获取数据行，尽管并不需要这一行且最终会被过滤掉。")]),t._v(" "),e("p",[t._v("下面看看为什么会发生这样的情况，以及如何重写查询以解决该问题")]),t._v(" "),e("p",[e("img",{attrs:{src:a(546),alt:"image-20200524193126939"}})]),t._v(" "),e("p",[t._v("这里索引无法覆盖查询，有两个原因：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("查询列表中选择了所有的列。")]),t._v(" "),e("p",[t._v("没有任何索引能够覆盖整个查询。不过，理论上可以利用：where 条件中的列是有索引覆盖的，因此 MySQL 可以使用该索引找到对应的 actor 并检查 title 是否匹配，过滤之后再读取需要的数据行。")])]),t._v(" "),e("li",[e("p",[t._v("MySQL 不能再索引中执行 like 操作")]),t._v(" "),e("p",[t._v("这是底层存储引擎 API 的限制。MySQL 5.5- 值允许在索引中做简单的操作（例如等于、不等于、以及大于）。能在索引中做最左前缀匹配的 like 比较，因为该操作可以转换为简单的比较操作，但是如果是通配符开头的 like 查询，存储引擎就无法做比较匹配。这种情况下，MySQL 服务器只能提取数据行的值而不是索引值来做比较")])])]),t._v(" "),e("p",[t._v("以上两个问题，需要重新查询并巧妙的设计索引，来解决；先将索引扩展至覆盖三个数据列"),e("code",[t._v("（artist,title,prod_id）")]),t._v(",然后按如下方式重写查询")]),t._v(" "),e("p",[e("img",{attrs:{src:a(547),alt:"image-20200524193651841"}})]),t._v(" "),e("p",[t._v("我们把这种方式叫做 "),e("strong",[t._v("延迟关联（deferred join）")]),t._v("，因为延迟了对列的访问。在查询的第一阶段 MySQL 可以使用覆盖索引，在 FROM 子句的子查询中找到匹配 prod_id ，然后根据这些 prod_id 值在外层查询匹配获取需要的所有列值。虽然无法使用索引覆盖整个查询，但总算比完全无法利用索引覆盖好。")]),t._v(" "),e("p",[t._v("笔者这里，看不明白，不是说不能使用 "),e("code",[t._v("like %xx%")]),t._v(" 吗，咋这里又可以了")]),t._v(" "),e("h2",{attrs:{id:"使用索引扫描来做排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用索引扫描来做排序"}},[t._v("#")]),t._v(" 使用索引扫描来做排序")]),t._v(" "),e("p",[t._v("MySQL 有两种方式可以生成有序的结果：")]),t._v(" "),e("ul",[e("li",[t._v("通过排序操作")]),t._v(" "),e("li",[t._v("按索引顺序扫描")])]),t._v(" "),e("p",[t._v("MySQL 有两种排序算法，更多的细节可以阅读第 7 章。")]),t._v(" "),e("p",[t._v("如果 explain 出来的 "),e("strong",[t._v("type 列为 「index」")]),t._v("，则说明 MySQL 使用了 "),e("strong",[t._v("索引扫描来做排序")]),t._v("；")]),t._v(" "),e("p",[t._v("扫描索引本身是很快的，因为只需要从一条索引记录移动到紧接着下一条记录。但是如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就都回表查询一次对应的行。这基本上都是随机 I/O，因此按索引顺序读取数据的速度通常要比顺序地全表扫描慢，尤其是在 I/O 密集型的工作负载时。")]),t._v(" "),e("p",[e("strong",[t._v("MySQL 可以使用同一个索引既满足排序，又用于查找行")]),t._v("。因此，如果可能，设计索引时应该尽可能的同事满足这两种任务，这样是最好的。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("只有当索引的 "),e("strong",[t._v("列顺序和 order by 子句的顺序完全一致")]),t._v("，并且所有 "),e("strong",[t._v("列的排序方向（倒序或则正序）都一样时")]),t._v("，才能使用索引来对结果做排序。")])]),t._v(" "),e("li",[e("p",[t._v("如果查询需要关联多张表，则只有当 order by 子句引用的 "),e("strong",[t._v("字段全部为第一个表时")]),t._v("，才能使用索引做排序")])])]),t._v(" "),e("p",[t._v("order by 子句和查找型查询的限制是一样的：需要满足索引的最左前缀的要求。")]),t._v(" "),e("p",[t._v("有一种情况下 order by 子句可以不满足索引的最左前缀的要求，就是当导列为常量的时候。如果 where 子句或则 join 子句中对这些列指定了常量，就可以弥补索引的不足。")]),t._v(" "),e("p",[t._v("例如：saklia 的 rental 在列 "),e("code",[t._v("rental_date,inventory_id,customer_id")]),t._v(" 上有名为 rental_date 的索引")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exists")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rental\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\trental_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto_increment")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\trental_date "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("datetime")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tinventory_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mediumint")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tcustomer_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("smallint")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\treturn_date "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("datetime")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tstaff_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tinyint")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tlast_update "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("timestamp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constraint")]),t._v(" rental_date\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unique")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rental_date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inventory_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" customer_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("MySQL 可以使用 rental_date 索引为下面的查询做排序，从 explan 中可以看到没有出现文件排序（filesort）的操作（说文件排序，其实并不一定使用磁盘文件）")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" rental_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staff_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rental\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rental_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-05-25'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" inventory_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" customer_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("select_type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("table")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("partitions")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("possible_keys")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key_len")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("ref")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("rows")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("filtered")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Extra")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("rental")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("ref")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("rental_date")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("rental_date")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("const")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("100")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")])])])]),t._v(" "),e("p",[t._v("即使 order by 子句不满足索引的最左前缀的要求，也可以用于查询排序，这是因为索引的第一列被指定为一个常数。（因为查询出来的数据在索引列里面的顺序是一致的，相当于使用到了最左前缀）")]),t._v(" "),e("p",[t._v("下面这个查询也没有问题，因为 order by 使用两列就是索引的最左前缀")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rental_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-05-25'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" rental_date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("inventory_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("下面是不能使用索引做排序的查询")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("使用了两种不同的排序方向，虽然索引列都是正序排序的")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rental_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-05-25'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" inventory_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" customer_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("asc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("order by 子句中引用了一个不在索引中的列")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rental_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-05-25'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" inventory_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staff_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("where 和 order by 中的列无法组合成索引的最左前缀")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rental_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-05-25'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" customer_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("在索引列的第一列上是范围条件，所以无法使用索引的其余列")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rental_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-05-25'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" inventory_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" customer_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这会触发 "),e("code",[t._v("Using filesort")])])]),t._v(" "),e("li",[e("p",[t._v("在 inventory_id 列上有多个等于条件。"),e("strong",[t._v("对于排序来说，这也是一种范围查询")])]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rental_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-05-25'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" inventory "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" customer_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])])]),t._v(" "),e("p",[t._v("下面这个例子理论上是可以使用索引进行关联排序的，但是由于优化器在优化时将 film_actory 表当做关联的第二张表，所以实际上无法使用索引")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" actor_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("film_actor\n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inner")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("film "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("film_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" actor_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("select_type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("table")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("partitions")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("possible_keys")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key_len")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("ref")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("rows")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("filtered")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Extra")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("film")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("index")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("PRIMARY")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("idx_title")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("514")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1000")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("100")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Using index; Using temporary; Using filesort")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("film_actor")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("ref")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("idx_fk_film_id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("idx_fk_film_id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("sakila.film.film_id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("100")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Using index")])])])]),t._v(" "),e("h2",{attrs:{id:"压缩（前缀压缩）索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#压缩（前缀压缩）索引"}},[t._v("#")]),t._v(" 压缩（前缀压缩）索引")]),t._v(" "),e("p",[t._v("MyISAM 使用 "),e("strong",[t._v("前缀压缩来减少索引的大小")]),t._v("，"),e("strong",[t._v("让更多的索引可以放入内存中")]),t._v("，这在某些情况下能极大的提高性能。默认值压缩字符串，但通过参数设置也可以对整数做压缩。")]),t._v(" "),e("p",[t._v("压缩每个索引块的方法是：")]),t._v(" "),e("ol",[e("li",[t._v("先完全保存索引块中的第一个值")]),t._v(" "),e("li",[t._v("然后将其他值和第一个值进行比较得到相同前缀的字节数和剩余的不同后缀部分")]),t._v(" "),e("li",[t._v("把这部分存储起来")])]),t._v(" "),e("p",[t._v("例如，索引块中第一个值是 「perform」，第二个值是「performance」，那么第二个值的前缀压缩后存储的是类似 "),e("code",[t._v("7,ance")]),t._v(" 这样的形式。MyISAM 对行指针也采用类似的前缀压缩方式。")]),t._v(" "),e("p",[e("strong",[t._v("压缩块使用更少的空间")]),t._v("，代价是某些操作可能更慢。因为每个值的压缩前缀都依赖前面的值，所以 MyISAM 查找时无法在索引块使用二分查找而只能从头开始扫描。正序的扫描速度还不错，但是如果是倒序扫描，例如 order by desc，就不是很好了。所有在块中查找某一行的操作平均都需要扫描半个索引块。")]),t._v(" "),e("p",[t._v("测试表明，对于 CPU 密集型应用，因为扫描需要随机查找，压缩索引使得 MyISAM 在索引查找上要慢好几倍。压缩索引的倒序扫描就更慢了。"),e("strong",[t._v("压缩索引需要在 CPU 内存资源与磁盘直接做权衡")])]),t._v(" "),e("p",[t._v("可以在 create table 语句中指定 pack_keys 参数来控制索引压缩的方式。")]),t._v(" "),e("h2",{attrs:{id:"冗余和重复索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#冗余和重复索引"}},[t._v("#")]),t._v(" 冗余和重复索引")]),t._v(" "),e("p",[e("strong",[t._v("重复索引是指")]),t._v("：在相同的列行按照 "),e("strong",[t._v("相同的顺序")]),t._v("创建的 "),e("strong",[t._v("相同类型")]),t._v(" 的索引")]),t._v(" "),e("p",[t._v("MySQL 允许在相同列上创建多个索引。"),e("strong",[t._v("需要单独维护重复的索引")]),t._v("，并且在优化器在优化查询的时候也需要逐个进行考虑，这会影响性能。")]),t._v(" "),e("p",[t._v("有时候会在不经意间创建了重复索引，比如下面的代码")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tid "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  a "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unique")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v("；\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("可能是想创建一个主键，先加上唯一限制，然后再加上索引以供查询使用。事实上，"),e("strong",[t._v("MySQL 的唯一限制和主键限制都是通过索引实现的")]),t._v("。因此上述是在相同的列上创建了三个重复的索引。")]),t._v(" "),e("p",[t._v("冗余索引和重复索引有一些不同。如果创建了索引 "),e("code",[t._v("(A,B)")]),t._v("，再创建索引  "),e("code",[t._v("(A)")]),t._v("就是冗余索引，因为这只是前一个索引的前缀索引（针对 B-Tree 索引来说的）。但是创建  "),e("code",[t._v("(B,A)")]),t._v(" ，则不是冗余索引，索引  "),e("code",[t._v("(B)")]),t._v(" 也不是，因为 B 不是索引  "),e("code",[t._v("(A,B)")]),t._v("的最左前缀列。")]),t._v(" "),e("p",[t._v("还有一种情况是将一个索引扩展为  "),e("code",[t._v("(A,ID)")]),t._v("，其中 ID 是主键，对于 InnoDB 来说主键列已经包含在二级索引中了，所以这也是冗余的。")]),t._v(" "),e("p",[t._v("大多数情况下都 "),e("strong",[t._v("不需要冗余索引")]),t._v("，应该尽量扩展已有的索引而不是创建新索引。但是也有出于性能方面的考虑需要冗余索引，因为扩展已有的索引会导致其变得太大，从而影响其他使用该索引的查询性能。")]),t._v(" "),e("p",[t._v("解决冗余索引和重复索引的方法很简单，删除这些索引就可以了，但首先要找出这样的索引。可以通过写一些负载的访问 information_schema 表的查询来找，不过还有两个更简单的方法。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("common_schema")]),t._v(" "),e("p",[t._v("shlomi Noach 的 common_schema 中的一些视图来定位，common_schema 是一系列可以安装到服务器上的常用存储和视图。")])]),t._v(" "),e("li",[e("p",[t._v("pt-duplicate-key-checker")]),t._v(" "),e("p",[t._v("该工具通过分析表结构来找出冗余和重复的索引。")])])]),t._v(" "),e("p",[t._v("在决定哪些索引可以被删除的时候要非常小心。比如：因为在二级索引的叶子节点包含了主键值，所以在列 "),e("code",[t._v("(A)")]),t._v("上的索引相当于 "),e("code",[t._v("(A,ID)")]),t._v(" ，如果有 "),e("code",[t._v("where a = 5 order by id")]),t._v(" 这样的查询，这个索引就非常有用。如果扩展为 "),e("code",[t._v("(A,B)")]),t._v("，就相当于 "),e("code",[t._v("(A,B,ID)")]),t._v("，那么这个查询 order by 子句就无法使用该索引做排序，而只能使用文件排序了（不满足最左前缀了）。建议使用 Percona 工具箱中的 pt-upgrade 工具来自行检查计划中的索引变更。")]),t._v(" "),e("h2",{attrs:{id:"未使用的索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#未使用的索引"}},[t._v("#")]),t._v(" 未使用的索引")]),t._v(" "),e("p",[t._v("可能会有一些服务器永远不用的索引，这些索引完全是累赘，建议考虑删除（有些索引的功能相当于唯一约束，虽然没有被查询使用，却可能是用于避免产生重复数据的）。可通过如下可用来定位：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("userstates 变量")]),t._v(" "),e("p",[t._v("在 Percona Server 或则 MariaDB 中先打开 userstates 服务器变量（默认是关闭的），服务器允许一段时间后，通过查询 "),e("code",[t._v("information_schema.index_statistics")]),t._v(" 就能查询到每个索引的使用频率")])]),t._v(" "),e("li",[e("p",[t._v("pt-index-usage")]),t._v(" "),e("p",[t._v("该工具可以读取查询日志，并对日志中的每条查询进行 explain 操作，然后打印出关于索引和查询的报告。")]),t._v(" "),e("p",[t._v("不仅可以找到那些索引式未使用的，还可以了解查询的执行计划，例如在某些情况有些类似的查询的执行方式不一样，这也可以帮助你定位到那些偶尔服务质量差的查询")]),t._v(" "),e("p",[t._v("该工具还可以将结果写入到 MySQL 的表中，方便查询结果")])])]),t._v(" "),e("h2",{attrs:{id:"索引和锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引和锁"}},[t._v("#")]),t._v(" 索引和锁")]),t._v(" "),e("p",[t._v("索引可以让查询锁定更少的行。如果你的查询从不访问那些不需要的行，那么就会锁定更少的行，从两个方面来看着对性能都有好处：")]),t._v(" "),e("ol",[e("li",[t._v("虽然 InnoDB 的行锁效率很高，内存使用页很少，但是锁定行仍会带来额外的开销")]),t._v(" "),e("li",[t._v("锁定超过需要的行会增加锁争用并减少并发性")])]),t._v(" "),e("p",[t._v("InnoDB 只有在 "),e("strong",[t._v("访问行")]),t._v(" 的时候才会 "),e("strong",[t._v("对其加锁")]),t._v("，而索引能够减少访问的行数，从而减少所的数量。但这只有 "),e("strong",[t._v("当 InnoDB 在存储引擎层能够过滤掉所有不需要的行时才有效")]),t._v("。如果索引无法过滤掉无效的行，那么在 InnoDB 检索到数据并返回给服务器层以后，MySQL 服务器才能应用 where 子句。这时已经无法避免锁定行了：InnoDB 已经锁住了这些行，到适当的时候才会释放。在 MySQL 5.1+ 中，InnoDB 可以在服务器端过滤掉行后就释放锁，但在早期版本中，只有在事务提交后才能释放所。")]),t._v(" "),e("p",[t._v("通过下面的例子很好解释了这些情况")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" autocommit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" actor_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actor\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- for update 是手动加锁")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("actor_id")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("4")])])])]),t._v(" "),e("p",[t._v("这条数据仅仅会返回 2~4 之间的行，但是实际上获取了 1~4 之间的行的排它锁。")]),t._v(" "),e("p",[t._v("InnoDB 会锁住第 1 行，这是因为 MySQL 为该查询选择的执行计划是索引范围扫描")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" actor_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actor\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("select_type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("table")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("partitions")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("possible_keys")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("key_len")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("ref")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("rows")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("filtered")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Extra")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("actor")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("range")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("PRIMARY")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("PRIMARY")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("100")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Using where; Using index")])])])]),t._v(" "),e("p",[t._v("换句话说，底层存储引擎的操作是：从索引的开头开始获取满足条件 "),e("code",[t._v("actor_id < 5")]),t._v(" 的记录，服务器并没有高数 InnoDB 可以过滤掉第一行的 where 条件。注意到  Extra 出现了 "),e("code",[t._v("Using where")]),t._v("，这表示 MySQL 服务器将存储引擎返回行以后再应用 where 过滤条件。")]),t._v(" "),e("p",[t._v("新打开一个 session 查询下面的语句，就能看到被阻塞了，说明第一行被锁住了")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" autocommit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" actor_id\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sakila"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actor\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" actor_id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("就像这个列子一样，即使使用了索引，InnoDB 也可能锁住一些不需要的数据。如果不能使用索引查找和锁定行的话问题可能会更糟糕，MySQL 会做全表扫描并锁住所有的行，而不管是不是需要。")]),t._v(" "),e("p",[t._v("关于 InnoDB、索引和所有一些很少人知道的细节：InnoDB 在二级索引上使用共享（读）锁，但访问主键索引需要排它（写）锁。这消除了使用覆盖索引的可能性，并且使得 "),e("code",[t._v("select for update")]),t._v(" 比 "),e("code",[t._v("lock in share mode")]),t._v(" 或非锁定查询要慢很多。")])])}),[],!1,null,null,null);s.default=n.exports}}]);